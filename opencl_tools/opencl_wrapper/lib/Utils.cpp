#include "Utils.h"

#include <stdexcept>

#include "CL/cl.h"

void verifyOutputCode(cl_int valueToCheck, const char* errorMessage) {
  if (isError(valueToCheck))
    throwException(valueToCheck, errorMessage);
}

inline bool isError(cl_int valueToCheck) {
  return valueToCheck != CL_SUCCESS;
}

inline void throwException(cl_int errorCode, const char* errorMessage) {
  std::string errorString(errorMessage);
  errorString += ": " + getErrorDescription(errorCode);
  throw std::runtime_error(errorString);
}

std::string getErrorDescription(cl_uint errorCode) {
  switch(errorCode) {
    case CL_SUCCESS:
      return "CL_SUCCESS";
    case CL_DEVICE_NOT_FOUND:
      return "CL_DEVICE_NOT_FOUND";
    case CL_DEVICE_NOT_AVAILABLE:
      return "CL_DEVICE_NOT_AVAILABLE";
    case CL_COMPILER_NOT_AVAILABLE:
      return "CL_COMPILER_NOT_AVAILABLE";
    case CL_MEM_OBJECT_ALLOCATION_FAILURE:
      return "CL_MEM_OBJECT_ALLOCATION_FAILURE";
    case CL_OUT_OF_RESOURCES:
      return "CL_OUT_OF_RESOURCES";
    case CL_OUT_OF_HOST_MEMORY:
      return "CL_OUT_OF_HOST_MEMORY";
    case CL_PROFILING_INFO_NOT_AVAILABLE:
      return "CL_PROFILING_INFO_NOT_AVAILABLE";
    case CL_MEM_COPY_OVERLAP:
      return "CL_MEM_COPY_OVERLAP";
    case CL_IMAGE_FORMAT_MISMATCH:
      return "CL_IMAGE_FORMAT_MISMATCH";
    case CL_IMAGE_FORMAT_NOT_SUPPORTED:
      return "CL_IMAGE_FORMAT_NOT_SUPPORTED";
    case CL_BUILD_PROGRAM_FAILURE:
      return "CL_BUILD_PROGRAM_FAILURE";
    case CL_MAP_FAILURE:
      return "CL_MAP_FAILURE";
    case CL_MISALIGNED_SUB_BUFFER_OFFSET:
      return "CL_MISALIGNED_SUB_BUFFER_OFFSET";
    case CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST:
      return "CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST";
    case CL_INVALID_VALUE:
      return "CL_INVALID_VALUE";
    case CL_INVALID_DEVICE_TYPE:
      return "CL_INVALID_DEVICE_TYPE";
    case CL_INVALID_PLATFORM:
      return "CL_INVALID_PLATFORM";
    case CL_INVALID_DEVICE:
      return "CL_INVALID_DEVICE";
    case CL_INVALID_CONTEXT:
      return "CL_INVALID_CONTEXT";
    case CL_INVALID_QUEUE_PROPERTIES:
      return "CL_INVALID_QUEUE_PROPERTIES";
    case CL_INVALID_COMMAND_QUEUE:
      return "CL_INVALID_COMMAND_QUEUE";
    case CL_INVALID_HOST_PTR:
      return "CL_INVALID_HOST_PTR";
    case CL_INVALID_MEM_OBJECT:
      return "CL_INVALID_MEM_OBJECT";
    case CL_INVALID_IMAGE_FORMAT_DESCRIPTOR:
      return "CL_INVALID_IMAGE_FORMAT_DESCRIPTOR";
    case CL_INVALID_IMAGE_SIZE:
      return "CL_INVALID_IMAGE_SIZE";
    case CL_INVALID_SAMPLER:
      return "CL_INVALID_SAMPLER";
    case CL_INVALID_BINARY:
      return "CL_INVALID_BINARY";
    case CL_INVALID_BUILD_OPTIONS:
      return "CL_INVALID_BUILD_OPTIONS";
    case CL_INVALID_PROGRAM:
      return "CL_INVALID_PROGRAM";
    case CL_INVALID_PROGRAM_EXECUTABLE:
      return "CL_INVALID_PROGRAM_EXECUTABLE";
    case CL_INVALID_KERNEL_NAME:
      return "CL_INVALID_KERNEL_NAME";
    case CL_INVALID_KERNEL_DEFINITION:
      return "CL_INVALID_KERNEL_DEFINITION";
    case CL_INVALID_KERNEL:
      return "CL_INVALID_KERNEL";
    case CL_INVALID_ARG_INDEX:
      return "CL_INVALID_ARG_INDEX";
    case CL_INVALID_ARG_VALUE:
      return "CL_INVALID_ARG_VALUE";
    case CL_INVALID_ARG_SIZE:
      return "CL_INVALID_ARG_SIZE";
    case CL_INVALID_KERNEL_ARGS:
      return "CL_INVALID_KERNEL_ARGS";
    case CL_INVALID_WORK_DIMENSION:
      return "CL_INVALID_WORK_DIMENSION";
    case CL_INVALID_WORK_GROUP_SIZE:
      return "CL_INVALID_WORK_GROUP_SIZE";
    case CL_INVALID_WORK_ITEM_SIZE:
      return "CL_INVALID_WORK_ITEM_SIZE";
    case CL_INVALID_GLOBAL_OFFSET:
      return "CL_INVALID_GLOBAL_OFFSET";
    case CL_INVALID_EVENT_WAIT_LIST:
      return "CL_INVALID_EVENT_WAIT_LIST";
    case CL_INVALID_EVENT:
      return "CL_INVALID_EVENT";
    case CL_INVALID_OPERATION:
      return "CL_INVALID_OPERATION";
    case CL_INVALID_GL_OBJECT:
      return "CL_INVALID_GL_OBJECT";
    case CL_INVALID_BUFFER_SIZE:
      return "CL_INVALID_BUFFER_SIZE";
    case CL_INVALID_MIP_LEVEL:
      return "CL_INVALID_MIP_LEVEL";
    case CL_INVALID_GLOBAL_WORK_SIZE:
      return "CL_INVALID_GLOBAL_WORK_SIZE";
    default:
      return "UNKNOWN ERROR CODE";
  }
}

//std::string getDeviceInfoDescription(cl_device_info deviceInfo) {
//CL_DEVICE_TYPE
//CL_DEVICE_VENDOR_ID
//CL_DEVICE_MAX_COMPUTE_UNITS
//CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS
//CL_DEVICE_MAX_WORK_GROUP_SIZE
//CL_DEVICE_MAX_WORK_ITEM_SIZES
//CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR
//CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT
//CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT
//CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG
//CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT
//CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE
//CL_DEVICE_MAX_CLOCK_FREQUENCY
//CL_DEVICE_ADDRESS_BITS
//CL_DEVICE_MAX_READ_IMAGE_ARGS
//CL_DEVICE_MAX_WRITE_IMAGE_ARGS
//CL_DEVICE_MAX_MEM_ALLOC_SIZE
//CL_DEVICE_IMAGE2D_MAX_WIDTH
//CL_DEVICE_IMAGE2D_MAX_HEIGHT
//CL_DEVICE_IMAGE3D_MAX_WIDTH
//CL_DEVICE_IMAGE3D_MAX_HEIGHT
//CL_DEVICE_IMAGE3D_MAX_DEPTH
//CL_DEVICE_IMAGE_SUPPORT
//CL_DEVICE_MAX_PARAMETER_SIZE
//CL_DEVICE_MAX_SAMPLERS
//CL_DEVICE_MEM_BASE_ADDR_ALIGN
//CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE
//CL_DEVICE_SINGLE_FP_CONFIG
//CL_DEVICE_GLOBAL_MEM_CACHE_TYPE
//CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE
//CL_DEVICE_GLOBAL_MEM_CACHE_SIZE
//CL_DEVICE_GLOBAL_MEM_SIZE
//CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE
//CL_DEVICE_MAX_CONSTANT_ARGS
//CL_DEVICE_LOCAL_MEM_TYPE
//CL_DEVICE_LOCAL_MEM_SIZE
//CL_DEVICE_ERROR_CORRECTION_SUPPORT
//CL_DEVICE_PROFILING_TIMER_RESOLUTION
//CL_DEVICE_ENDIAN_LITTLE
//CL_DEVICE_AVAILABLE
//CL_DEVICE_COMPILER_AVAILABLE
//CL_DEVICE_EXECUTION_CAPABILITIES
//CL_DEVICE_QUEUE_PROPERTIES
//CL_DEVICE_NAME
//CL_DEVICE_VENDOR
//CL_DRIVER_VERSION
//CL_DEVICE_PROFILE
//CL_DEVICE_VERSION
//CL_DEVICE_EXTENSIONS
//CL_DEVICE_PLATFORM
//CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF
//CL_DEVICE_HOST_UNIFIED_MEMORY
//CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR
//CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT
//CL_DEVICE_NATIVE_VECTOR_WIDTH_INT
//CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG
//CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT
//CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE
//CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF
//CL_DEVICE_OPENCL_C_VERSION
//}
